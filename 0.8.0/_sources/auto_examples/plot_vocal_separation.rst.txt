
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vocal_separation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vocal_separation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vocal_separation.py:


================
Vocal separation
================

This notebook demonstrates a simple technique for separating vocals (and
other sporadic foreground signals) from accompanying instrumentation.

This is based on the "REPET-SIM" method of `Rafii and Pardo, 2012
<http://www.cs.northwestern.edu/~zra446/doc/Rafii-Pardo%20-%20Music-Voice%20Separation%20using%20the%20Similarity%20Matrix%20-%20ISMIR%202012.pdf>`_, but includes a couple of modifications and extensions:

    - FFT windows overlap by 1/4, instead of 1/2
    - Non-local filtering is converted into a soft mask by Wiener filtering.
      This is similar in spirit to the soft-masking method used by `Fitzgerald, 2012
      <http://arrow.dit.ie/cgi/viewcontent.cgi?article=1086&context=argcon>`_,
      but is a bit more numerically stable in practice.

.. GENERATED FROM PYTHON SOURCE LINES 19-31

.. code-block:: default


    # Code source: Brian McFee
    # License: ISC

    ##################
    # Standard imports
    import numpy as np
    import matplotlib.pyplot as plt
    import librosa

    import librosa.display








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Load an example with vocals.

.. GENERATED FROM PYTHON SOURCE LINES 33-40

.. code-block:: default

    y, sr = librosa.load(librosa.ex('fishin'), duration=120)


    # And compute the spectrogram magnitude and phase
    S_full, phase = librosa.magphase(librosa.stft(y))









.. GENERATED FROM PYTHON SOURCE LINES 41-42

Plot a 5-second slice of the spectrum

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: default

    idx = slice(*librosa.time_to_frames([10, 15], sr=sr))
    fig, ax = plt.subplots()
    img = librosa.display.specshow(librosa.amplitude_to_db(S_full[:, idx], ref=np.max),
                             y_axis='log', x_axis='time', sr=sr, ax=ax)
    fig.colorbar(img, ax=ax)




.. image-sg:: /auto_examples/images/sphx_glr_plot_vocal_separation_001.png
   :alt: plot vocal separation
   :srcset: /auto_examples/images/sphx_glr_plot_vocal_separation_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /tmp/tmpyqsnvw7s/adf93050549a15c80610e7cdca9a52a72a665a5c/librosa/display.py:974: MatplotlibDeprecationWarning: The 'basey' parameter of __init__() has been renamed 'base' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.
      scaler(mode, **kwargs)
    /tmp/tmpyqsnvw7s/adf93050549a15c80610e7cdca9a52a72a665a5c/librosa/display.py:974: MatplotlibDeprecationWarning: The 'linthreshy' parameter of __init__() has been renamed 'linthresh' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.
      scaler(mode, **kwargs)
    /tmp/tmpyqsnvw7s/adf93050549a15c80610e7cdca9a52a72a665a5c/librosa/display.py:974: MatplotlibDeprecationWarning: The 'linscaley' parameter of __init__() has been renamed 'linscale' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.
      scaler(mode, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 49-53

The wiggly lines above are due to the vocal component.
Our goal is to separate them from the accompanying
instrumentation.


.. GENERATED FROM PYTHON SOURCE LINES 53-74

.. code-block:: default


    # We'll compare frames using cosine similarity, and aggregate similar frames
    # by taking their (per-frequency) median value.
    #
    # To avoid being biased by local continuity, we constrain similar frames to be
    # separated by at least 2 seconds.
    #
    # This suppresses sparse/non-repetetitive deviations from the average spectrum,
    # and works well to discard vocal elements.

    S_filter = librosa.decompose.nn_filter(S_full,
                                           aggregate=np.median,
                                           metric='cosine',
                                           width=int(librosa.time_to_frames(2, sr=sr)))

    # The output of the filter shouldn't be greater than the input
    # if we assume signals are additive.  Taking the pointwise minimium
    # with the input spectrum forces this.
    S_filter = np.minimum(S_full, S_filter)









.. GENERATED FROM PYTHON SOURCE LINES 75-77

The raw filter output can be used as a mask,
but it sounds better if we use soft-masking.

.. GENERATED FROM PYTHON SOURCE LINES 77-98

.. code-block:: default


    # We can also use a margin to reduce bleed between the vocals and instrumentation masks.
    # Note: the margins need not be equal for foreground and background separation
    margin_i, margin_v = 2, 10
    power = 2

    mask_i = librosa.util.softmask(S_filter,
                                   margin_i * (S_full - S_filter),
                                   power=power)

    mask_v = librosa.util.softmask(S_full - S_filter,
                                   margin_v * S_filter,
                                   power=power)

    # Once we have the masks, simply multiply them with the input spectrum
    # to separate the components

    S_foreground = mask_v * S_full
    S_background = mask_i * S_full









.. GENERATED FROM PYTHON SOURCE LINES 99-100

Plot the same slice, but separated into its foreground and background

.. GENERATED FROM PYTHON SOURCE LINES 100-118

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2

    fig, ax = plt.subplots(nrows=3, sharex=True, sharey=True)
    img = librosa.display.specshow(librosa.amplitude_to_db(S_full[:, idx], ref=np.max),
                             y_axis='log', x_axis='time', sr=sr, ax=ax[0])
    ax[0].set(title='Full spectrum')
    ax[0].label_outer()

    librosa.display.specshow(librosa.amplitude_to_db(S_background[:, idx], ref=np.max),
                             y_axis='log', x_axis='time', sr=sr, ax=ax[1])
    ax[1].set(title='Background')
    ax[1].label_outer()

    librosa.display.specshow(librosa.amplitude_to_db(S_foreground[:, idx], ref=np.max),
                             y_axis='log', x_axis='time', sr=sr, ax=ax[2])
    ax[2].set(title='Foreground')
    fig.colorbar(img, ax=ax)



.. image-sg:: /auto_examples/images/sphx_glr_plot_vocal_separation_002.png
   :alt: Full spectrum, Background, Foreground
   :srcset: /auto_examples/images/sphx_glr_plot_vocal_separation_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /tmp/tmpyqsnvw7s/adf93050549a15c80610e7cdca9a52a72a665a5c/librosa/display.py:974: MatplotlibDeprecationWarning: The 'basey' parameter of __init__() has been renamed 'base' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.
      scaler(mode, **kwargs)
    /tmp/tmpyqsnvw7s/adf93050549a15c80610e7cdca9a52a72a665a5c/librosa/display.py:974: MatplotlibDeprecationWarning: The 'linthreshy' parameter of __init__() has been renamed 'linthresh' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.
      scaler(mode, **kwargs)
    /tmp/tmpyqsnvw7s/adf93050549a15c80610e7cdca9a52a72a665a5c/librosa/display.py:974: MatplotlibDeprecationWarning: The 'linscaley' parameter of __init__() has been renamed 'linscale' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.
      scaler(mode, **kwargs)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.460 seconds)


.. _sphx_glr_download_auto_examples_plot_vocal_separation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_vocal_separation.py <plot_vocal_separation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_vocal_separation.ipynb <plot_vocal_separation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
