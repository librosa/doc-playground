
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_pcen_stream.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_pcen_stream.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_pcen_stream.py:


==============
PCEN Streaming
==============

This notebook demonstrates how to use streaming IO with `librosa.pcen`
to do dynamic per-channel energy normalization on a spectrogram incrementally.

This is useful when processing long audio files that are too large to load all at
once, or when streaming data from a recording device.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

We'll need numpy and matplotlib for this example

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: default

    import numpy as np
    import matplotlib.pyplot as plt

    import soundfile as sf

    import librosa as librosa
    import librosa.display as display









.. GENERATED FROM PYTHON SOURCE LINES 28-29

First, we'll start with an audio file that we want to stream

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    filename = librosa.ex('humpback')








.. GENERATED FROM PYTHON SOURCE LINES 32-34

Next, we'll set up the block reader to work on short segments of
audio at a time.

.. GENERATED FROM PYTHON SOURCE LINES 34-52

.. code-block:: default


    # We'll generate 64 frames at a time, each frame having 2048 samples
    # and 75% overlap.
    #

    n_fft = 2048
    hop_length = 512

    # fill_value pads out the last frame with zeros so that we have a
    # full frame at the end of the signal, even if the signal doesn't
    # divide evenly into full frames.
    sr = librosa.get_samplerate(filename)

    stream = librosa.stream(filename, block_length=16,
                            frame_length=n_fft,
                            hop_length=hop_length,
                            mono=True,
                            fill_value=0)







.. GENERATED FROM PYTHON SOURCE LINES 53-55

For this example, we'll compute PCEN on each block, find the maximum
response over frequency, and store the results in a list.

.. GENERATED FROM PYTHON SOURCE LINES 55-79

.. code-block:: default


    # Make an array to store the frequency-averaged PCEN values
    pcen_blocks = []

    # Initialize the PCEN filter delays to steady state
    zi = None

    for y_block in stream:
        # Compute the STFT (without padding, so center=False)
        D = librosa.stft(y_block, n_fft=n_fft, hop_length=hop_length,
                         center=False)

        # Compute PCEN on the magnitude spectrum, using initial delays
        # returned from our previous call (if any)
        # store the final delays for use as zi in the next iteration
        P, zi = librosa.pcen(np.abs(D), sr=sr, hop_length=hop_length,
                             zi=zi, return_zf=True)

        # Compute the max PCEN over frequency, and append it to our list
        pcen_blocks.extend(np.max(P, axis=0))

    # Cast to a numpy array for use downstream
    pcen_blocks = np.asarray(pcen_blocks)








.. GENERATED FROM PYTHON SOURCE LINES 80-82

For the sake of comparison, let's see how it would look had we
run PCEN on the entire spectrum without block-wise processing

.. GENERATED FROM PYTHON SOURCE LINES 82-95

.. code-block:: default


    y, sr = librosa.load(filename, sr=sr)

    # Keep the same parameters as before
    D = librosa.stft(y, n_fft=n_fft, hop_length=hop_length, center=False)

    # Compute pcen on the magnitude spectrum.
    # We don't need to worry about initial and final filter delays if
    # we're doing everything in one go.
    P = librosa.pcen(np.abs(D), sr=sr, hop_length=hop_length)

    pcen_full = np.max(P, axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 96-97

Plot the PCEN spectrum and the resulting magnitudes

.. GENERATED FROM PYTHON SOURCE LINES 97-114

.. code-block:: default


    # First, plot the spectrum
    fig, ax = plt.subplots(nrows=2, sharex=True)
    librosa.display.specshow(P, sr=sr, hop_length=hop_length,
                             x_axis='time', y_axis='log', ax=ax[0])
    ax[0].set(title='PCEN spectrum')
    ax[0].label_outer()

    # Now we'll plot the pcen curves
    times = librosa.times_like(pcen_full, sr=sr, hop_length=hop_length)
    ax[1].plot(times, pcen_full, linewidth=3, alpha=0.25, label='Full signal PCEN')
    times = librosa.times_like(pcen_blocks, sr=sr, hop_length=hop_length)
    ax[1].plot(times, pcen_blocks, linestyle=':', label='Block-wise PCEN')
    ax[1].legend()

    # Zoom in to a short patch to see the fine details
    ax[1].set(xlim=[30, 40]);



.. image-sg:: /auto_examples/images/sphx_glr_plot_pcen_stream_001.png
   :alt: PCEN spectrum
   :srcset: /auto_examples/images/sphx_glr_plot_pcen_stream_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.299 seconds)


.. _sphx_glr_download_auto_examples_plot_pcen_stream.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pcen_stream.py <plot_pcen_stream.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pcen_stream.ipynb <plot_pcen_stream.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
